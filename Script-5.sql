
--TRUNCATE TABLE order_items, payment, orders, shipments, customers, products, suppliers RESTART IDENTITY CASCADE;


/*
 –ë–õ–û–ö –ê [–ü—Ä–æ–¥–∞–∂–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è]

 –ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≥–æ–¥–∞–º ------ ‚úÖ  (dbt = order_count_year.sql) +
*/

select 
	date_part('year', order_date) as year,	
	count(order_id) as count_order
from orders
group by year
order by year ASC;


--–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü—É + max –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑–∞–º –∏ —Ä–∞—Å—á–µ—Ç –¥–µ–ª—å—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º –æ—Ç max ---------  ‚úÖ (dbt = order_count_year+month_diff) +

select
    date_part('year', order_date) as year,
    date_part('month', order_date) as month,
    count(order_id) as count_order,
    max(count(order_id)) over (partition by date_part('year', order_date)) as max_in_year,
    count(order_id) - max(count(order_id)) over (partition by date_part('year', order_date)) as diff_from_max
from orders
group by year, month
order by year, month;



/*
 –ó–∞–¥–∞–Ω–∏–µ 2 ------

 C—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (AOV) ‚úÖ ------ (dbt = AOV_EBITDA_COUNT.sql) +

 AOV = –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
*/

select
	round((sum(pr.price * oi.quantity) / count(distinct o.order_id))::numeric, 2) avr_order_value
from orders o
join payment pa on o.order_id=pa.payment_id
join order_items oi on o.order_id=oi.order_id
join products pr on oi.product_id=pr.product_id
where pa.transaction_status='Completed'
order by avr_order_value;


--- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –ö–∞—Ç–µ–≥–æ—Ä–∏—è–º ----------------- (dbt = AOV_category.sql) +
select
	pr.category category,
	round((sum(pr.price * oi.quantity) / count(distinct o.order_id))::numeric, 2) avr_order_value
from orders o
join payment pa on o.order_id=pa.payment_id
join order_items oi on o.order_id=oi.order_id
join products pr on oi.product_id=pr.product_id
where pa.transaction_status='Completed'
group by pr.category
order by avr_order_value;


--- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –ü—Ä–æ–¥—É–∫—Ç—É ------------------- (dbt = AOV_product_name.sql) +
select
	pr.product_name product_name,
	round((sum(pr.price * oi.quantity) / count(distinct o.order_id))::numeric, 2) avr_order_value
from orders o
join payment pa on o.order_id=pa.payment_id
join order_items oi on o.order_id=oi.order_id
join products pr on oi.product_id=pr.product_id
where pa.transaction_status='Completed'
group by pr.product_name
order by avr_order_value;


/*–ó–∞–¥–∞–Ω–∏–µ 3 ------

 –í—ã—Ä—É—á–∫–∞ (Revenue)  ‚úÖ ------

 Revenue = —Å—É–º–º–∞ –≤—Å–µ—Ö –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ 
 –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–∂. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ/–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤—ã—à–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

*/

--–≤—ã—Ä—É—á–∫–∞ –ø–æ –≥–æ–¥–∞–º –∏ –º–µ—Å—è—Ü—É (dbt = EBITDA_year+month.sql) +

with products_new as (
	select
		o.*,
		pa.*,
		oi.*,
		pr.*
	from orders o
	join payment pa on o.order_id=pa.payment_id
	join order_items oi on o.order_id=oi.order_id
	join products pr on oi.product_id=pr.product_id
	where pa.transaction_status='Completed'
),
orders_new as (
	select
		date_part('year', pn.order_date) as year,
	    date_part('month', pn.order_date) as month,
	    sum(pn.amount) revenue
	from products_new pn
	group by year, month
	order by year, month, revenue
)
select 
	*
from orders_new;


--–≤—ã—Ä—É—á–∫–∞ –ø–æ –≥–æ–¥–∞–º + –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ + max_amount -- (dbt = EBITDA_year+count_orders+max_amount.sql) +

select
	date_part('year', o.order_date) as year,
    sum(pa.amount) as revenue,
    count(o.order_id) as order_id,
    max(pa.amount) as max_amount
from orders as o
join payment as pa on o.order_id=pa.payment_id
join order_items as oi on o.order_id=oi.order_id
join products as pr on oi.product_id=pr.product_id
where pa.transaction_status='Completed'
group by year
order by year, revenue;

-- –ï—â–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ -- (dbt = EBITDA_diff_time.sql) +

SELECT 
    date_part('year', o.order_date) as year,
	date_part('month', o.order_date) as month,
    SUM(p.amount) as revenue,
    LAG(SUM(p.amount)) OVER (ORDER BY DATE_PART('year', o.order_date), DATE_PART('month', o.order_date)) as prev_revenue,
    (SUM(p.amount) - LAG(SUM(p.amount)) OVER (ORDER BY DATE_PART('year', o.order_date), DATE_PART('month', o.order_date))) AS diff_absolute,
    ROUND(
        100.0 * (SUM(p.amount) - LAG(SUM(p.amount)) OVER (ORDER BY DATE_PART('year', o.order_date), DATE_PART('month', o.order_date)))
        / NULLIF(LAG(SUM(p.amount)) OVER (ORDER BY DATE_PART('year', o.order_date), DATE_PART('month', o.order_date)),0)
    ) as diff_percent
FROM orders as o
JOIN payment as p ON o.order_id = p.order_id
WHERE p.transaction_status='Completed'
GROUP BY date_part('month', o.order_date), date_part('year', o.order_date)
ORDER BY year, month;

-- –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤ -- (dbt = EBITDE_category.sql) +

select
	date_part('year', o.order_date) as year,
	date_part('month', o.order_date) as month,
  	pr.category,
  	sum(pa.amount) as revenue
from orders as o
join payment as pa on o.order_id=pa.payment_id
join order_items as oi on o.order_id=oi.order_id
join products as pr on oi.product_id=pr.product_id
where pa.transaction_status='Completed'
group by year, month, category 
order by year, month;


/*
 –ó–∞–¥–∞–Ω–∏–µ 4 ------

  4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑ (Items per Order)  ------

 üìå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

 Items per Order (IPO) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∫–ª–∞–¥—ë—Ç –≤ –æ–¥–∏–Ω –∑–∞–∫–∞–∑.

 üëâ –§–æ—Ä–º—É–ª–∞:

 IPO = –û–±—â–µ–µ¬†–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ¬†—Ç–æ–≤–∞—Ä–æ–≤/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ¬†–∑–∞–∫–∞–∑–æ–≤

 –ù–∞–º –≤–∞–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –∑–∞–∫–∞–∑ –∏ –µ–≥–æ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏.
*/
	
	
-- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑ (Items per Order)-- (dbt = Count_Items_per_Order.sql) +

select 
	round(avg(items_per_order)) as avg_items_per_order
from (select 
			o.order_id,
			sum(oi.quantity) items_per_order
	 from orders o
	 join order_items oi on o.order_id = oi.order_id
	 join payment p on o.order_id=p.order_id
	 where p.transaction_status = 'Completed'
	 group by o.order_id) as tq
	 
-- –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º --(dbt = Dunam_Items_month.sql) +

select 
	date_part('month', o.order_date) as month,	
	round(avg(items_per_order)) as avg_items_per_order
from (select 
			o.order_id,
			sum(oi.quantity) items_per_order
	 from orders o
	 join order_items oi on o.order_id = oi.order_id
	 join payment p on o.order_id=p.order_id
	 where p.transaction_status = 'Completed'
	 group by o.order_id) as tq	
join orders o on tq.order_id = o.order_id
group by month
order by month;
	 	 
-- –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤-- (dbt = Dunam_items_category.sql)

select 
	pr.category,
	round(avg(items_per_order)) as avg_items_per_order
from (select 
			o.order_id, 
			sum(oi.quantity) items_per_order
	 from orders o
	 join order_items oi on o.order_id = oi.order_id
	 join payment p on o.order_id=p.order_id
	 where p.transaction_status = 'Completed'
	 group by o.order_id) as tq	
join orders o on tq.order_id = o.order_id
join products pr on tq.order_id=pr.product_id
group by pr.category 
order by avg_items_per_order;

-------------------------------------------------


/*
 [–ë–ª–æ–∫ B: –ö–ª–∏–µ–Ω—Ç—ã]
 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 | –ú–µ—Ç—Ä–∏–∫–∏:                                                  |
 | 1. –ù–æ–≤—ã–µ vs. –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ ‚úÖ                      |
 | 2. –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫ (Orders per Customer) ‚úÖ              |
 | 3. LTV (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ) ‚úÖ                               |
 | 4. Retention (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã) ‚úÖ                        |
 |                                                          |
 | –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:                                            |
 | - –ö—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: –¥–æ–ª—è –Ω–æ–≤—ã—Ö/–ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤    |
 | - –õ–∏–Ω–µ–π–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏: –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ –Ω–µ–¥–µ–ª—è–º        |
 | - –¢–∞–±–ª–∏—Ü—ã: —Ç–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ                  |
 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

--------------------------------------------------

 | –ú–µ—Ç—Ä–∏–∫–∏:      
                                            |
 | 1. –ù–æ–≤—ã–µ vs. –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ ‚úÖ            (dbt = B_fct_customer_types.sql) +

üîπ –°—É—Ç—å –º–µ—Ç—Ä–∏–∫–∏

 –ù–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å (New Customer) ‚Äî —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ –∫–æ–º–ø–∞–Ω–∏–∏.

 –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å (Returning Customer) ‚Äî —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑, –Ω–æ —É –Ω–µ–≥–æ —É–∂–µ –±—ã–ª–∏ –∑–∞–∫–∞–∑—ã —Ä–∞–Ω–µ–µ.

 –≠—Ç–∞ –º–µ—Ç—Ä–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:

 –ö–∞–∫ –±–∏–∑–Ω–µ—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.

 –ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–µ—Ä–∂–∞–Ω–∏–µ (retention) —á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏.

 üîπ –ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å

 –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (customer_id) –Ω–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.

 –í –∑–∞–∫–∞–∑–∞—Ö —Å–º–æ—Ç—Ä–∏–º:

 –ï—Å–ª–∏ order_date = min(order_date) ‚Üí –∑–∞–∫–∞–∑ –æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.

 –ï—Å–ª–∏ order_date > min(order_date) ‚Üí –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.

 –°—á–∏—Ç–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º/–≥–æ–¥–∞–º.
*/	 


WITH customer_forder AS (
    SELECT
       	o.customer_id,
       	min(o.order_date) as first_order_date
    FROM orders o
    group by o.customer_id
),
orders_labeled as (
	select 
		o.order_id,
		o.customer_id,
		o.order_date,
		case
			when DATE_TRUNC('month', o.order_date) = DATE_TRUNC('month', cf.first_order_date)
				then 'New'
			else 'Returning'
		end as customer_type
	from orders o
	join customer_forder cf on o.customer_id=cf.customer_id
)
SELECT 
	DATE_TRUNC('month', o.order_date)::date AS month,
    customer_type,
    COUNT(DISTINCT o.customer_id) AS customers_count,
    COUNT(DISTINCT o.order_id) AS orders_count
FROM orders_labeled o
GROUP BY DATE_TRUNC('month', o.order_date)::date, customer_type
ORDER BY month, customer_type;

-------------------------------------------------------------------------------

--üîπ 2. –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫ (Orders per Customer)
-- üìå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

-- Orders per Customer (OPC) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–µ–ª–∞–µ—Ç –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.

-- –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ ‚Üí –∫–ª–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è.

-- –ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ ‚Üí –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º.

-- üìä –î–∞–Ω–Ω—ã–µ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ

-- orders ‚Üí order_id, customer_id, order_date, status.

-- payment ‚Üí –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (transaction_status='Completed').

-- üõ† –§–æ—Ä–º—É–ª–∞
-- OPC=–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ¬†–≤—Å–µ—Ö¬†–∑–∞–∫–∞–∑–æ–≤/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ¬†—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö¬†–∫–ª–∏–µ–Ω—Ç–æ–≤

-- 1Ô∏è‚É£ –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è	‚Äã

select 
	count(distinct o.order_id)::float/count(distinct cu.customer_id) as order_per_customer
from orders o
join customers cu on o.customer_id = cu.customer_id
join payment pa on o.order_id=pa.order_id 
where pa.transaction_status = 'Completed';

-------------------------------------------------------------------------------------

-- 2Ô∏è‚É£ –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º

SELECT
    DATE_TRUNC('month', o.order_date)::date AS month,
    COUNT(DISTINCT o.order_id)::float / COUNT(DISTINCT o.customer_id) AS orders_per_customer
from orders o
join customers cu on o.customer_id = cu.customer_id
join payment pa on o.order_id=pa.order_id 
where pa.transaction_status = 'Completed'
GROUP BY DATE_TRUNC('month', o.order_date)
ORDER BY month;

-------------------------------------------------------------------------------------

--3Ô∏è‚É£ –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∫–ª–∏–µ–Ω—Ç–æ–≤ (New vs Returning) (dbt = B_fct_orders_per_customer_segmented.sql)

--–ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏—Ç—Ä–∏–Ω–∞ orders_labeled (New / Returning):

WITH customer_forder AS (
    SELECT
       	o.customer_id,
       	min(o.order_date) as first_order_date
    FROM orders o
    group by o.customer_id
),
orders_labeled as (
	select 
		o.order_id,
		o.customer_id,
		o.order_date,
		case
			when DATE_TRUNC('month', o.order_date) = DATE_TRUNC('month', cf.first_order_date)
				then 'New'
			else 'Returning'
		end as customer_type
	from orders o
	join customer_forder cf on o.customer_id=cf.customer_id
)
SELECT 
	DATE_TRUNC('month', o.order_date)::date AS month,
    customer_type,
    COUNT(DISTINCT order_id)::float / COUNT(DISTINCT customer_id) AS orders_per_customer
FROM orders_labeled o
GROUP BY DATE_TRUNC('month', o.order_date)::date, customer_type
ORDER BY month, customer_type;

-- –ö–æ–¥ dbt-–º–æ–¥–µ–ª–∏
-- models/fct_orders_per_customer.sql

--üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏

--–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è fct_orders_per_customer_segmented.sql.
--–û–Ω–∞ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ:

--orders

--order_items (—á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –∑–∞–∫–∞–∑–æ–º)

--products (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞)

-- üõ† –ö–æ–¥ dbt-–º–æ–¥–µ–ª–∏
-- models/fct_orders_per_customer_segmented.sql

WITH customer_first_order AS (
    SELECT
        o.customer_id,
        MIN(o.order_date) AS first_order_date
    FROM orders o
    WHERE o.status = 'completed'
    GROUP BY o.customer_id
),
orders_labeled AS (
    SELECT
        o.order_id,
        o.customer_id,
        o.order_date,
        CASE
            WHEN DATE_TRUNC('month', o.order_date) = DATE_TRUNC('month', cfo.first_order_date)
                THEN 'New'
            ELSE 'Returning'
        END AS customer_type
    FROM orders o
    JOIN customer_first_order cfo 
        ON o.customer_id = cfo.customer_id
    WHERE o.status = 'completed'
),
monthly_stats AS (
    SELECT
        DATE_TRUNC('month', order_date)::date AS month,
        customer_type,
        COUNT(DISTINCT order_id) AS total_orders,
        COUNT(DISTINCT customer_id) AS total_customers
    FROM orders_labeled
    GROUP BY 1, 2
)
SELECT
    month,
    customer_type,
    total_orders,
    total_customers,
    (total_orders::float / NULLIF(total_customers, 0)) AS orders_per_customer
FROM monthly_stats
ORDER BY month, customer_type;

---------------------------------------------------------------------------------------------

-- üîπ 3. LTV (Lifetime Value, –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ)
-- üìå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

-- LTV = —Å—É–º–º–∞—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/–≤—ã—Ä—É—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–Ω–æ—Å–∏—Ç –∫–ª–∏–µ–Ω—Ç –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

-- –í e-commerce —á–∞—â–µ —Å—á–∏—Ç–∞—é—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:

-- LTV=ARPU√óAOV√óCLV

-- –Ω–æ –±–µ–∑ –º–∞—Ä–∂–∏ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Revenue per Customer (RPC):

-- LTV‚âà–û–±—â–∞—è¬†–≤—ã—Ä—É—á–∫–∞/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ¬†—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö¬†–∫–ª–∏–µ–Ω—Ç–æ–≤
	‚Äã
-- üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞

-- orders ‚Üí order_id, customer_id, order_date, status

-- order_items ‚Üí product_id, quantity

-- products ‚Üí price

-- payment ‚Üí amount, transaction_status

-- üëâ –î–ª—è LTV –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤—è–∑–∫–∏: customer_id ‚Üí –µ–≥–æ –∑–∞–∫–∞–∑—ã ‚Üí revenue.
	

	
	--1Ô∏è‚É£ LTV –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É	
SELECT
    o.customer_id,
    SUM(p.amount) AS customer_revenue
FROM orders o
JOIN payment p ON o.order_id = p.order_id
WHERE p.transaction_status = 'Completed'
GROUP BY o.customer_id;

	-- 2Ô∏è‚É£ –°—Ä–µ–¥–Ω–∏–π LTV –ø–æ –≤—Å–µ–π –±–∞–∑–µ
SELECT
    SUM(p.amount)::float / COUNT(DISTINCT o.customer_id) AS avg_ltv
FROM orders o
JOIN payment p ON o.order_id = p.order_id
WHERE p.transaction_status = 'Completed';

	--üîπ 3Ô∏è‚É£ –î–∏–Ω–∞–º–∏–∫–∞ LTV –ø–æ –º–µ—Å—è—Ü–∞–º

SELECT
    DATE_TRUNC('month', o.order_date)::date AS month,
    round((SUM(p.amount)::float / COUNT(DISTINCT o.customer_id))::numeric, 2) AS avg_ltv
FROM orders o
JOIN payment p ON o.order_id = p.order_id
WHERE p.transaction_status = 'Completed'
GROUP BY 1
ORDER BY month;
-- üëâ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è —Å—Ä–µ–¥–Ω–∏–π LTV –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å–¥–µ–ª–∞–≤—à–∏—Ö –∑–∞–∫–∞–∑—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü.


-- üìÇ –ú–æ–¥–µ–ª—å: fct_customer_ltv_cohort.sql

-- –≠—Ç–∞ –≤–∏—Ç—Ä–∏–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:
-- üëâ ¬´–ö–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Å—Ä–µ–¥–Ω–∏–π LTV –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –º–µ—Å—è—Ü, —á–µ—Ä–µ–∑ 1, 2, 3 ‚Ä¶ N –º–µ—Å—è—Ü–µ–≤?¬ª

-- üõ† –ö–æ–¥ dbt-–º–æ–¥–µ–ª–∏
-- models/fct_customer_ltv_cohort.sql

WITH customer_first_order AS (
    SELECT
        o.customer_id,
        MIN(o.order_date) AS first_order_date
    FROM {{ ref('orders') }} o
    JOIN {{ ref('payment') }} p 
        ON o.order_id = p.order_id
    WHERE p.transaction_status = 'Completed'
    GROUP BY o.customer_id
),
orders_with_cohort AS (
    SELECT
        o.customer_id,
        o.order_date,
        p.amount,
        DATE_TRUNC('month', cfo.first_order_date)::date AS cohort_month,
        DATE_PART('month', AGE(DATE_TRUNC('month', o.order_date), DATE_TRUNC('month', cfo.first_order_date))) AS months_since_cohort
    FROM {{ ref('orders') }} o
    JOIN {{ ref('payment') }} p 
        ON o.order_id = p.order_id
    JOIN customer_first_order cfo
        ON o.customer_id = cfo.customer_id
    WHERE p.transaction_status = 'Completed'
),
cohort_ltv AS (
    SELECT
        cohort_month,
        months_since_cohort,
        AVG(SUM(amount)) OVER (PARTITION BY cohort_month, customer_id ORDER BY months_since_cohort ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_ltv_per_customer
    FROM orders_with_cohort
    GROUP BY cohort_month, customer_id, months_since_cohort
)
SELECT
    cohort_month,
    months_since_cohort,
    AVG(cumulative_ltv_per_customer) AS avg_ltv
FROM cohort_ltv
GROUP BY cohort_month, months_since_cohort
ORDER BY cohort_month, months_since_cohort;

-------------------------------------------------------------------------------------

-- üîπ 4. Retention (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
-- üìå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

-- Retention –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∞—è –¥–æ–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏ –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–ø—É—Å—Ç—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–º–µ—Å—è—Ü, –∫–≤–∞—Ä—Ç–∞–ª).

-- –í e-commerce retention –∏–∑–º–µ—Ä—è—é—Ç:

-- Repeat Purchase Rate (RPR) = % –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞–ª–∏ –±–æ–ª–µ–µ 1 –∑–∞–∫–∞–∑–∞.

-- Monthly Retention = –¥–æ–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏.

-- Cohort Retention = –∫–∞–∫ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—ã, –ø—Ä–∏—à–µ–¥—à–∏–µ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –º–µ—Å—è—Ü.

-- üìä –î–∞–Ω–Ω—ã–µ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ Kaggle

-- orders ‚Üí order_id, customer_id, order_date, status.

-- payment ‚Üí —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Completed.

-- –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å retention.


SELECT
    COUNT(DISTINCT CASE WHEN order_count > 1 THEN customer_id END)::float
    / COUNT(DISTINCT customer_id) AS repeat_purchase_rate
FROM (
    SELECT
        o.customer_id,
        COUNT(DISTINCT o.order_id) AS order_count
    FROM orders o
    JOIN payment p ON o.order_id = p.order_id
    WHERE p.transaction_status = 'Completed'
    GROUP BY o.customer_id
) tq;

 -- 2Ô∏è‚É£ Monthly Retention (–¥–æ–ª—è –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤)

WITH customer_orders AS (
    SELECT
        o.customer_id,
        DATE_TRUNC('month', o.order_date)::date AS month
    FROM orders o
    JOIN payment p ON o.order_id = p.order_id
    WHERE p.transaction_status = 'Completed'
    GROUP BY o.customer_id, DATE_TRUNC('month', o.order_date)
),
cohort AS (
    SELECT
        customer_id,
        MIN(month) AS cohort_month
    FROM customer_orders
    GROUP BY customer_id
)
SELECT
    c.cohort_month,
    co.month,
    COUNT(DISTINCT co.customer_id) AS retained_customers
FROM customer_orders co
JOIN cohort c ON co.customer_id = c.customer_id
GROUP BY c.cohort_month, co.month
ORDER BY c.cohort_month, co.month;


-- –ú–æ–¥–µ–ª—å –¥–ª—è DBT

-- üìÇ –ú–æ–¥–µ–ª—å: fct_customer_retention.sql

-- –≠—Ç–∞ –º–æ–¥–µ–ª—å —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç:

-- –∫–æ–≥–æ—Ä—Ç–Ω—ã–π –º–µ—Å—è—Ü (–º–µ—Å—è—Ü –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞),

-- –º–µ—Å—è—Ü –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏,

-- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤,

-- % retention –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–≥–æ—Ä—Ç—ã.

-- üõ† –ö–æ–¥ dbt-–º–æ–¥–µ–ª–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
-- models/fct_customer_retention.sql

WITH customer_orders AS (
    select                                                    -- –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
        o.customer_id,
        DATE_TRUNC('month', o.order_date)::date AS month
    FROM orders o						    -- –í dbt = FROM {{ref('orders')}} o												
    JOIN payment p                          -- –í dbt = JOIN {{ref('payment')}} p 
        ON o.order_id = p.order_id
    WHERE p.transaction_status = 'Completed'
    GROUP BY o.customer_id, DATE_TRUNC('month', o.order_date)
),
cohorts AS (                                                 -- –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–≥–æ—Ä—Ç—É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–º–µ—Å—è—Ü –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏)
    SELECT
        customer_id,
        MIN(month) AS cohort_month
    FROM customer_orders
    GROUP BY customer_id
),
orders_with_cohort AS (                                     -- –®–∞–≥ 3: –°–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–∫—É–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Ö –∫–æ–≥–æ—Ä—Ç–æ–π
    SELECT
        co.customer_id,
        c.cohort_month,
        co.month,
        DATE_PART('month', AGE(co.month, c.cohort_month)) AS months_since_cohort
    FROM customer_orders co
    JOIN cohorts c ON co.customer_id = c.customer_id
),
cohort_sizes AS (                                         -- –®–∞–≥ 4: –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π –∫–æ–≥–æ—Ä—Ç—ã (—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É)
    SELECT
        cohort_month,
        COUNT(DISTINCT customer_id) AS cohort_size
    FROM cohorts
    GROUP BY cohort_month
),
retention AS (                                           -- –®–∞–≥ 5: –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–≥–æ—Ä—Ç—ã –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑—ã –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü—ã
    SELECT
        cohort_month,
        months_since_cohort,
        COUNT(DISTINCT customer_id) AS retained_customers
    FROM orders_with_cohort
    GROUP BY cohort_month, months_since_cohort
)                                                       -- –®–∞–≥ 6: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º retention % = –¥–æ–ª—è —É–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–≥–æ—Ä—Ç—ã
SELECT
    r.cohort_month,
    r.months_since_cohort,
    r.retained_customers,
    cs.cohort_size,
    ROUND(r.retained_customers::numeric / cs.cohort_size, 3) AS retention_rate
FROM retention r
JOIN cohort_sizes cs ON r.cohort_month = cs.cohort_month
ORDER BY r.cohort_month, r.months_since_cohort;

-------------------------------------------------------------------------------------------------

-- –≤–∞—Ä–∏–∞–Ω—Ç ‚Ññ2 
--–ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ—Ç retention –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–∫–æ—Ö–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º). –ï–≥–æ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ Metabase –∏ —Å—Ç—Ä–æ–∏—Ç—å heatmap:
-- dbt –º–æ–¥–µ–ª–∏


-- models/fct_customer_retention.sql

WITH first_order AS (
    -- –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    SELECT
        customer_id,
        MIN(order_date) AS first_order_date
    FROM {{ ref('orders') }}
    GROUP BY customer_id
),
orders_with_cohort AS (
    -- –®–∞–≥ 2: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É –∫–ª–∏–µ–Ω—Ç–∞ –µ–≥–æ –∫–æ–≥–æ—Ä—Ç—É
    SELECT
        o.customer_id,
        DATE_TRUNC('month', o.order_date)::date AS order_month,
        DATE_TRUNC('month', f.first_order_date)::date AS cohort_month
    FROM {{ ref('orders') }} o
    JOIN first_order f 
      ON o.customer_id = f.customer_id
),
orders_labeled AS (
    -- –®–∞–≥ 3: –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –ø—Ä–æ—à–ª–æ —Å –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
    SELECT
        customer_id,
        cohort_month,
        order_month,
        (EXTRACT(YEAR FROM order_month) - EXTRACT(YEAR FROM cohort_month)) * 12 +
        (EXTRACT(MONTH FROM order_month) - EXTRACT(MONTH FROM cohort_month)) AS months_since_first
    FROM orders_with_cohort
),
cohort_sizes AS (
    -- –®–∞–≥ 4: –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π –∫–æ–≥–æ—Ä—Ç—ã (–∫–æ–ª-–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–æ–π)
    SELECT
        cohort_month,
        COUNT(DISTINCT customer_id) AS cohort_size
    FROM orders_labeled
    WHERE months_since_first = 0
    GROUP BY cohort_month
),
retention_counts AS (
    -- –®–∞–≥ 5: –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    SELECT
        cohort_month,
        months_since_first,
        COUNT(DISTINCT customer_id) AS retained_customers
    FROM orders_labeled
    GROUP BY cohort_month, months_since_first
)
-- –®–∞–≥ 6: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è
SELECT
    r.cohort_month,
    r.months_since_first,
    r.retained_customers,
    cs.cohort_size,
    ROUND(100.0 * r.retained_customers / cs.cohort_size, 2) AS retention_rate
FROM retention_counts r
JOIN cohort_sizes cs 
  ON r.cohort_month = cs.cohort_month
ORDER BY r.cohort_month, r.months_since_first;

-------------------------------------------------------------------------------------------

-- –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫:

-- [–ë–ª–æ–∫ C: –ü—Ä–æ–¥—É–∫—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏]
-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
-- | –ú–µ—Ç—Ä–∏–∫–∏:                                                  |
-- | 1. –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚úÖ                               |
-- | 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ SKU ‚úÖ                |
-- | 3. –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ                             |
-- |                                                          |
-- | –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:                                            |
-- | - –°—Ç–æ–ª–±—á–∞—Ç—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: —Ç–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –≤—ã—Ä—É—á–∫–µ     |
-- | - –¢–∞–±–ª–∏—Ü—ã: —Ç–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º  
--------------------------------------------------------------------------------------------

--  1. –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚úÖ

select 
	pr.category,
	DATE_TRUNC('month', o.order_date)::date as month,
	round(sum(oi.quantity * oi.price_at_purchase)) as revenue
from orders o
join order_items oi on o.order_id=oi.order_id 
join products pr on oi.product_id=pr.product_id
join payment pa on o.order_id=pa.payment_id
where pa.transaction_status ='Completed'
group by pr.category, DATE_TRUNC('month', o.order_date)::date
ORDER BY month, revenue DESC;

------- –î–ª—è dbt----------------------------------

WITH revenue_per_category AS (
    SELECT 
        pr.category,
        DATE_TRUNC('month', o.order_date)::date AS month,
        ROUND(SUM(oi.quantity * oi.price_at_purchase) * 1.0 / COUNT(DISTINCT o.order_id), 2) as avg_check
    FROM {{ ref('orders') }} o
    JOIN {{ ref('order_items') }} oi on o.order_id=oi.order_id 
    JOIN {{ ref('products') }} pr on oi.product_id=pr.product_id
    JOIN {{ ref('payment') }} pa on o.order_id=pa.payment_id
    WHERE pay.transaction_status = 'Completed'
    group by pr.category, DATE_TRUNC('month', o.order_date)::date
)
SELECT * 
FROM revenue_per_category
ORDER BY month, revenue DESC;

--‚ö° –¢–∞–∫ –º—ã –ø–æ–ª—É—á–∏–º –≤–∏—Ç—Ä–∏–Ω—É —Å –≤—ã—Ä—É—á–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –≥–æ—Ç–æ–≤—É—é –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.

----------------------------------------

--2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ SKU ‚úÖ

--–≠—Ç–∞ –º–µ—Ç—Ä–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:

--—Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (SKU) –±—ã–ª–æ –∑–∞–∫–∞–∑–∞–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥,

--–ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—è–≤–∏—Ç—å —Ö–∏—Ç—ã –ø—Ä–æ–¥–∞–∂ –∏ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º —Å–ø—Ä–æ—Å–æ–º.

--–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:

--—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏,

--–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–æ–∫,

--–æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.


-- Items_per_SKU=‚àë(order_items.quantity)

-- —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ product_id (SKU). (dbt = C_Items_per_SKU.sql)


SELECT 
    p.product_id,
    p.product_name,
    SUM(oi.quantity) AS total_quantity,
    DATE_TRUNC('month', o.order_date)::date AS month
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
JOIN payment pay ON o.order_id = pay.order_id
WHERE pay.transaction_status = 'Completed'
GROUP BY p.product_id, p.product_name, DATE_TRUNC('month', o.order_date)
ORDER BY total_quantity DESC;

---------------------------------- –¥–ª—è dbt------------------------------

WITH sku_sales AS (
    SELECT 
        p.product_id,
        p.product_name,
        SUM(oi.quantity) AS total_quantity
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    JOIN payment pay ON o.order_id = pay.order_id
    WHERE pay.transaction_status = 'Completed'
    GROUP BY p.product_id, p.product_name
),
ranked AS (
    SELECT
        product_id,
        product_name,
        total_quantity,
        RANK() OVER (ORDER BY total_quantity DESC) AS rnk
    FROM sku_sales
)
SELECT
    CASE 
        WHEN rnk <= 10 THEN product_name
        ELSE 'Other'
    END AS product_group,
    SUM(total_quantity) AS total_quantity
FROM ranked
GROUP BY product_group
ORDER BY total_quantity DESC;

--------------------------------------------------------------------------------

-- | 3. –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ  (dbt = C_avg_check_per_category.sql)

SELECT 
    p.category,
    DATE_TRUNC('month', o.order_date)::date AS month,
    ROUND((SUM(oi.quantity * oi.price_at_purchase) * 1.0 / COUNT(DISTINCT o.order_id))::numeric, 2) AS avg_check
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
JOIN payment pay ON o.order_id = pay.order_id
WHERE pay.transaction_status = 'Completed'
GROUP BY p.category, DATE_TRUNC('month', o.order_date)
ORDER BY month, avg_check DESC;

--- –¥–ª—è dbt -------------------------------------

WITH avg_check_per_category AS (
    SELECT 
        p.category,
        DATE_TRUNC('month', o.order_date)::date AS month,
        ROUND(SUM(oi.quantity * oi.unit_price) * 1.0 / COUNT(DISTINCT o.order_id), 2) AS avg_check
    FROM {{ ref('orders') }} o
    JOIN {{ ref('order_items') }} oi ON o.order_id = oi.order_id
    JOIN {{ ref('products') }} p ON oi.product_id = p.product_id
    JOIN {{ ref('payment') }} pay ON o.order_id = pay.order_id
    WHERE pay.transaction_status = 'Completed'
    GROUP BY p.category, DATE_TRUNC('month', o.order_date)
)
SELECT * FROM avg_check_per_category;

--------------------------------------------------------------------

-- [–ë–ª–æ–∫ D: –ü–ª–∞—Ç–µ–∂–∏]
-- ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
-- | –ú–µ—Ç—Ä–∏–∫–∏:                                                  |
-- | 1. –í—ã—Ä—É—á–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã ‚úÖ                          |
-- | 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ‚úÖ                        |
-- | 3. –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã ‚úÖ                        |
-- |                                                          |
-- | –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:                                            |
-- | - –ö—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–µ—Ç–æ–¥–∞–º  |
-- | - –õ–∏–Ω–µ–π–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏: –¥–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º            |




-- | –ú–µ—Ç—Ä–∏–∫–∏:                                                  |
-- | 1. –í—ã—Ä—É—á–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã ‚úÖ    (dbt = D_revenue_by_payment%.sql)

-- üîπ –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ

-- –≠—Ç–∞ –º–µ—Ç—Ä–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤—ã—Ä—É—á–∫–∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∫–∞–∂–¥—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞—Ä—Ç–∞, PayPal, –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂, Apple Pay).

-- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:

-- –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤,

-- –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∏—Å—Å–∏–π –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤,

-- –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.

SELECT 
    p.payment_method,
    DATE_TRUNC('month', o.order_date)::date AS month,
    round(SUM(p.amount)::numeric, 1) AS revenue
FROM orders o
JOIN payment p ON o.order_id = p.order_id
WHERE p.transaction_status = 'Completed'
GROUP BY p.payment_method, DATE_TRUNC('month', o.order_date)
ORDER BY month, revenue DESC;

-------------- –î–ª—è  dbt ----------------------------------------

WITH revenue_by_payment AS (
    SELECT 
        p.payment_method,
        DATE_TRUNC('month', o.order_date)::date AS month,
        SUM(p.amount) AS revenue
    FROM {{ ref('orders') }} o
    JOIN {{ ref('payment') }} p ON o.order_id = p.order_id
    WHERE p.transaction_status = 'Completed'
    GROUP BY p.payment_method, DATE_TRUNC('month', o.order_date)
)
SELECT * FROM revenue_by_payment;

---- –∏–ª–∏ ------------------------------------------

--- –î–æ–±–∞–≤–∏–º –∫ –º–µ—Ç—Ä–∏–∫–µ –í—ã—Ä—É—á–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã –µ—â—ë –æ–¥–∏–Ω —Å–ª–æ–π ‚Äî –¥–æ–ª—è (%) –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏.

--üîπ SQL-–∑–∞–ø—Ä–æ—Å —Å –¥–æ–ª—è–º–∏ (%)
WITH revenue_by_payment AS (
    SELECT 
        p.payment_method,
        DATE_TRUNC('month', o.order_date)::date AS month,
        SUM(p.amount) AS revenue
    FROM orders o
    JOIN payment p ON o.order_id = p.order_id
    WHERE p.transaction_status = 'Completed'
    GROUP BY p.payment_method, DATE_TRUNC('month', o.order_date)
),
total_revenue AS (
    SELECT 
        month,
        SUM(revenue) AS total_revenue
    FROM revenue_by_payment
    GROUP BY month
)
SELECT 
    rbp.month,
    rbp.payment_method,
    rbp.revenue,
    ROUND(rbp.revenue * 100.0 / tr.total_revenue, 2) AS revenue_share_percent
FROM revenue_by_payment rbp
JOIN total_revenue tr ON rbp.month = tr.month
ORDER BY rbp.month, rbp.revenue DESC;

----------------------------------------------------------------------

-- | 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ‚úÖ        (dbt = D_total_orders.sql)

-- üîπ –°–º—ã—Å–ª –º–µ—Ç—Ä–∏–∫–∏

-- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –≥–¥–µ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Completed).

-- –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—â–µ–π –º–µ—Ç—Ä–∏–∫–∏ ¬´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤¬ª, —Ç.–∫. –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–∑–∏–Ω–∞ –∏–ª–∏ –∑–∞–∫–∞–∑ –±–µ–∑ –æ–ø–ª–∞—Ç—ã.

-- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:

-- –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –æ–ø–ª–∞—Ç—É,

-- —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã,

-- –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ—Ä—å (–±—Ä–æ—à–µ–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã, –æ—Ç–º–µ–Ω—ã).

-- üîπ SQL-–∑–∞–ø—Ä–æ—Å (–ø–æ –º–µ—Å—è—Ü–∞–º)

SELECT 
    DATE_TRUNC('month', o.order_date)::date AS month,
    p.payment_method,
    COUNT(DISTINCT o.order_id) AS paid_orders
FROM orders o
JOIN payment p ON o.order_id = p.order_id
WHERE p.transaction_status = 'Completed'
GROUP BY DATE_TRUNC('month', o.order_date), p.payment_method
ORDER BY month, paid_orders DESC;

--------–î–ª—è dbt -----------------------------------------

--–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –æ–ø–ª–∞—Ç—ã (Payment Conversion Rate, PCR).

--üîπ –°–º—ã—Å–ª –º–µ—Ç—Ä–∏–∫–∏ Payment Conversion Rate (PCR) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∞—è –¥–æ–ª—è –∑–∞–∫–∞–∑–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞.
-- –§–æ—Ä–º—É–ª–∞:

-- ùëÉùê∂ùëÖ= (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ¬†–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö¬†–∑–∞–∫–∞–∑–æ–≤/–û–±—â–µ–µ¬†–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ¬†–∑–∞–∫–∞–∑–æ–≤)√ó100%

WITH total_orders AS (
    SELECT 
        DATE_TRUNC('month', o.order_date)::date AS month,
        COUNT(DISTINCT o.order_id) AS total_orders
    FROM orders o
    GROUP BY DATE_TRUNC('month', o.order_date)
),
paid_orders AS (
    SELECT 
        DATE_TRUNC('month', o.order_date)::date AS month,
        COUNT(DISTINCT o.order_id) AS paid_orders
    FROM orders o
    JOIN payment p ON o.order_id = p.order_id
    WHERE p.transaction_status = 'Completed'
    GROUP BY DATE_TRUNC('month', o.order_date)
)
SELECT 
    t.month,
    t.total_orders,
    p.paid_orders,
    ROUND(CAST(p.paid_orders AS NUMERIC) / NULLIF(t.total_orders, 0) * 100, 2) AS payment_conversion_rate
FROM total_orders t
LEFT JOIN paid_orders p ON t.month = p.month
ORDER BY t.month;

---------------------------------------------------------------------------------

-- 3. –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã ‚úÖ (dbt = D_payment_stats.sql)
-- üîπ –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ

-- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã (Average Order Value by Payment Method) ‚Äî —ç—Ç–æ —Å—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã.

-- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:

-- –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–ª–∞—Ç—ë–∂–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º,

-- –≤—ã—è–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º/–Ω–∏–∑–∫–∏–º —Å—Ä–µ–¥–Ω–∏–º —á–µ–∫–æ–º,

-- –æ—Ü–µ–Ω–∫–∏ –≤–ª–∏—è–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å.

SELECT 
    p.payment_method,
    DATE_TRUNC('month', o.order_date)::date AS month,
    ROUND(SUM(p.amount) * 1.0 / COUNT(DISTINCT o.order_id), 2) AS avg_check
FROM orders o
JOIN payment p ON o.order_id = p.order_id
WHERE p.transaction_status = 'Completed'
GROUP BY p.payment_method, DATE_TRUNC('month', o.order_date)
ORDER BY month, avg_check DESC;

--------–∏–ª–∏----------------------

----- –î–ª—è dbt--------------------------
-- —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã + –¥–æ–ª—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –≤ –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–µ.

WITH payment_stats AS (
    SELECT 
        p.payment_method,
        DATE_TRUNC('month', o.order_date)::date AS month,
        SUM(p.amount) AS total_revenue,
        COUNT(DISTINCT o.order_id) AS paid_orders,
        ROUND(SUM(p.amount) * 1.0 / COUNT(DISTINCT o.order_id), 2) AS avg_check
    FROM orders o
    JOIN payment p ON o.order_id = p.order_id
    WHERE p.transaction_status = 'Completed'
    GROUP BY p.payment_method, DATE_TRUNC('month', o.order_date)
),
monthly_totals AS (
    SELECT 
        month,
        SUM(total_revenue) AS total_monthly_revenue
    FROM payment_stats
    GROUP BY month
)
SELECT 
    ps.month,
    ps.payment_method,
    ps.paid_orders,
    round(ps.total_revenue, 2)::numeric,
    ps.avg_check,
    ROUND((ps.total_revenue * 100.0 / mt.total_monthly_revenue)::numeric, 2) AS revenue_share_percent
FROM payment_stats ps
JOIN monthly_totals mt ON ps.month = mt.month
ORDER BY ps.month, ps.total_revenue desc;

------------------------------------------------------------------------------------------------------

-- | 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ‚úÖ |----------  (dbt = D_Payment_Conversion_Rate.sql)

SELECT 
    DATE_TRUNC('month', o.order_date)::date AS month,
    COUNT(DISTINCT o.order_id) AS paid_orders
FROM orders o
JOIN payment p ON o.order_id = p.order_id
WHERE p.transaction_status = 'Completed'
GROUP BY DATE_TRUNC('month', o.order_date)
ORDER BY month;

---üîπ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã)

SELECT 
    DATE_TRUNC('month', o.order_date)::date AS month,
    p.payment_method,
    COUNT(DISTINCT o.order_id) AS paid_orders
FROM orders o
JOIN payment p ON o.order_id = p.order_id
WHERE p.transaction_status = 'Completed'
GROUP BY DATE_TRUNC('month', o.order_date), p.payment_method
ORDER BY month, paid_orders DESC;

--------------------------------------------------------------

--–î–µ–ª–∞–µ–º —Å–≤—è–∑–∫—É: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ + –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã (Payment Conversion Rate, PCR).

--üîπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

--–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (Paid Orders) ‚Üí –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º Completed.

--Payment Conversion Rate (PCR) ‚Üí –¥–æ–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö.

WITH total_orders AS (
    SELECT 
        DATE_TRUNC('month', o.order_date)::date AS month,
        COUNT(DISTINCT o.order_id) AS total_orders
    FROM orders o
    GROUP BY DATE_TRUNC('month', o.order_date)
),
paid_orders AS (
    SELECT 
        DATE_TRUNC('month', o.order_date)::date AS month,
        COUNT(DISTINCT o.order_id) AS paid_orders
    FROM orders o
    JOIN payment p ON o.order_id = p.order_id
    WHERE p.transaction_status = 'Completed'
    GROUP BY DATE_TRUNC('month', o.order_date)
)
SELECT 
    t.month,
    t.total_orders,
    p.paid_orders,
    ROUND(p.paid_orders * 100.0 / NULLIF(t.total_orders,0), 2) AS payment_conversion_rate
FROM total_orders t
LEFT JOIN paid_orders p ON t.month = p.month
ORDER BY t.month;

------------------------------------------------------------------------------------------------------

-- | 3. –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã ‚úÖ     (dbt = D_AOV_payment_method.sql)

--–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
--üëâ –ö–∞–∫–æ–≤–∞ —Å—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∏–º –º–µ—Ç–æ–¥–æ–º –∫–ª–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, Credit Card, PayPal, Bank Transfer).

--–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å:

--–∫–∞–∫–∏–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–Ω–æ—Å—è—Ç –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã,

--–≥–¥–µ –∫–ª–∏–µ–Ω—Ç—ã —Å–∫–ª–æ–Ω–Ω—ã —Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ,

--–∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã.

SELECT 
    DATE_TRUNC('month', o.order_date)::date AS month,
    p.payment_method,
    COUNT(DISTINCT o.order_id) AS paid_orders,
    SUM(p.amount) AS total_revenue,
    ROUND(SUM(p.amount) * 1.0 / NULLIF(COUNT(DISTINCT o.order_id),0), 2) AS avg_check
FROM orders o
JOIN payment p ON o.order_id = p.order_id
WHERE p.transaction_status = 'Completed'
GROUP BY DATE_TRUNC('month', o.order_date), p.payment_method
ORDER BY month, total_revenue DESC;

------------------------------------------------------------------------------------------------------------

--[–ë–ª–æ–∫ E: –û—Ç–∑—ã–≤—ã]                   (dbt = E_Reviews + positive+negative.sql)

--‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
--| –ú–µ—Ç—Ä–∏–∫–∏:                                                  |
--| 1. –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ ‚úÖ                               |
--| 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä—É ‚úÖ                        |
--| 3. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ ‚úÖ    |
--|                                                          |
--| –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:                                            |
--| - –¢–∞–±–ª–∏—Ü—ã: —Ç–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É                   |
--| - –°—Ç–æ–ª–±—á–∞—Ç—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º|
--‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ




-- –ú–µ—Ç—Ä–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É.

-- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.

-- –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∏–ª–∏ –Ω–∏–∑–∫–∏–º —Å–ø—Ä–æ—Å–æ–º –∏–∑-–∑–∞ –ø–ª–æ—Ö–∏—Ö –æ—Ü–µ–Ω–æ–∫.

-- –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –≤–∏—Ç—Ä–∏–Ω–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

	‚Äã

WITH base_reviews AS (
    SELECT
        r.review_id,
        r.product_id,
        r.rating::numeric AS rating,  -- –ø—Ä–∏–≤–æ–¥–∏–º –∫ numeric
        r.review_date::date AS review_date,
        DATE_TRUNC('month', r.review_date::date)::date AS month
    FROM reviews r
),
product_stats AS (
    SELECT
        p.product_id,
        p.product_name,
        p.category AS category_name,
        COUNT(br.review_id) AS reviews_count,
        AVG(br.rating) AS avg_rating,
        SUM(CASE WHEN br.rating >= 4 THEN 1 ELSE 0 END) AS positive_reviews,
        SUM(CASE WHEN br.rating <= 2 THEN 1 ELSE 0 END) AS negative_reviews,
        ROUND(SUM(CASE WHEN br.rating >= 4 THEN 1 ELSE 0 END)::numeric / NULLIF(COUNT(br.review_id),0),2) AS positive_share,
        ROUND(SUM(CASE WHEN br.rating <= 2 THEN 1 ELSE 0 END)::numeric / NULLIF(COUNT(br.review_id),0),2) AS negative_share,
        CASE
            WHEN SUM(CASE WHEN br.rating <= 2 THEN 1 ELSE 0 END) = 0 THEN NULL
            ELSE ROUND(SUM(CASE WHEN br.rating >= 4 THEN 1 ELSE 0 END)::numeric 
                       / SUM(CASE WHEN br.rating <= 2 THEN 1 ELSE 0 END),2)
        END AS pos_neg_ratio
    FROM products p
    LEFT JOIN base_reviews br ON p.product_id = br.product_id
    GROUP BY p.product_id, p.product_name, p.category
),
global_stats AS (
    SELECT
        AVG(rating) AS global_avg_rating,
        50 AS m
    FROM base_reviews
),
weighted_ratings AS (
    SELECT
        ps.*,
        ROUND(((ps.reviews_count::float / (ps.reviews_count + gs.m)) * ps.avg_rating +(gs.m::float / (ps.reviews_count + gs.m)) * gs.global_avg_rating::numeric)::numeric, 2) AS weighted_rating
    FROM product_stats ps
    CROSS JOIN global_stats gs
),
monthly_reviews AS (
    SELECT
        br.month,
        br.product_id,
        COUNT(br.review_id) AS monthly_reviews_count,
        ROUND(AVG(br.rating),2) AS monthly_avg_rating
    FROM base_reviews br
    GROUP BY br.month, br.product_id
),
monthly_with_window AS (
    SELECT
        mr.*,
        SUM(mr.monthly_reviews_count) OVER (PARTITION BY mr.product_id ORDER BY mr.month) AS cumulative_reviews,
        mr.monthly_avg_rating - LAG(mr.monthly_avg_rating) OVER (PARTITION BY mr.product_id ORDER BY mr.month) AS delta_avg_rating,
        RANK() OVER (PARTITION BY mr.month ORDER BY mr.monthly_reviews_count DESC) AS product_rank_by_reviews
    FROM monthly_reviews mr
)
SELECT
    wr.product_id,
    wr.product_name,
    wr.category_name,
    wr.reviews_count,
    ROUND(wr.avg_rating,2) AS avg_rating,
    wr.weighted_rating,
    wr.positive_reviews,
    wr.negative_reviews,
    wr.positive_share,
    wr.negative_share,
    wr.pos_neg_ratio,
    mw.month,
    mw.monthly_reviews_count,
    mw.monthly_avg_rating,
    mw.cumulative_reviews,
    mw.delta_avg_rating,
    mw.product_rank_by_reviews
FROM weighted_ratings wr
LEFT JOIN monthly_with_window mw ON wr.product_id = mw.product_id
ORDER BY mw.month DESC NULLS LAST, mw.product_rank_by_reviews;



---------------------------------------------------------------------------------------------

-----–¥–ª—è DBT---------------------

-- üõ† dbt-–º–æ–¥–µ–ª—å —Å –æ–∫–æ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: reviews_dashboard.sql

-- –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ –æ–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

-- cumulative_reviews ‚Üí –æ–±—â–µ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä—É.

-- delta_avg_rating ‚Üí —Ä–∞–∑–Ω–∏—Ü–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º.

-- product_rank_by_reviews ‚Üí –º–µ—Å—Ç–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ —á–∏—Å–ª—É –æ—Ç–∑—ã–≤–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—è—Ü–µ.

WITH base_reviews AS (
    SELECT
        r.review_id,
        r.product_id,
        r.rating,
        r.review_date::date AS review_date,
        DATE_TRUNC('month', r.review_date)::date AS month
    FROM {{ ref('reviews') }} r
),
product_stats AS (
    SELECT
        p.product_id,
        p.product_name,
        COUNT(r.review_id) AS reviews_count,
        AVG(r.rating) AS avg_rating
    FROM {{ ref('products') }} p
    LEFT JOIN base_reviews r ON p.product_id = r.product_id
    GROUP BY p.product_id, p.product_name
),
global_stats AS (
    SELECT
        AVG(r.rating) AS global_avg_rating,
        50 AS m  -- –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    FROM base_reviews r
),
weighted_ratings AS (
    SELECT
        ps.product_id,
        ps.product_name,
        ps.reviews_count,
        ps.avg_rating,
        ROUND((
            (ps.reviews_count::float / (ps.reviews_count + gs.m)) * ps.avg_rating +
            (gs.m::float / (ps.reviews_count + gs.m)) * gs.global_avg_rating
        )::numeric, 2) AS weighted_rating
    FROM product_stats ps
    CROSS JOIN global_stats gs
),
monthly_reviews AS (
    SELECT
        br.month,
        br.product_id,
        COUNT(br.review_id) AS monthly_reviews_count,
        ROUND(AVG(br.rating), 2) AS monthly_avg_rating
    FROM base_reviews br
    GROUP BY br.month, br.product_id
),
monthly_with_window AS (
    SELECT
        mr.*,
        -- –ö—É–º—É–ª—è—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
        SUM(mr.monthly_reviews_count) OVER (
            PARTITION BY mr.product_id ORDER BY mr.month
        ) AS cumulative_reviews,
        
        -- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
        mr.monthly_avg_rating - LAG(mr.monthly_avg_rating) OVER (
            PARTITION BY mr.product_id ORDER BY mr.month
        ) AS delta_avg_rating,
        
        -- –†–∞–Ω–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —á–∏—Å–ª—É –æ—Ç–∑—ã–≤–æ–≤ –≤ –º–µ—Å—è—Ü–µ
        RANK() OVER (
            PARTITION BY mr.month ORDER BY mr.monthly_reviews_count DESC
        ) AS product_rank_by_reviews
    FROM monthly_reviews mr
),
category_reviews AS (
    SELECT
        c.category_id,
        c.category_name,
        COUNT(r.review_id) AS reviews_count,
        ROUND(AVG(r.rating), 2) AS avg_rating
    FROM {{ ref('categories') }} c
    JOIN {{ ref('products') }} p ON c.category_id = p.category_id
    LEFT JOIN base_reviews r ON p.product_id = r.product_id
    GROUP BY c.category_id, c.category_name
)
SELECT
    wr.product_id,
    wr.product_name,
    wr.reviews_count,
    ROUND(wr.avg_rating, 2) AS avg_rating,
    wr.weighted_rating,
    mw.month,
    mw.monthly_reviews_count,
    mw.monthly_avg_rating,
    mw.cumulative_reviews,
    mw.delta_avg_rating,
    mw.product_rank_by_reviews,
    cr.category_name,
    cr.reviews_count AS category_reviews_count,
    cr.avg_rating AS category_avg_rating
FROM weighted_ratings wr
LEFT JOIN monthly_with_window mw ON wr.product_id = mw.product_id
LEFT JOIN {{ ref('products') }} p ON wr.product_id = p.product_id
LEFT JOIN category_reviews cr ON p.category_id = cr.category_id
ORDER BY mw.month DESC, mw.product_rank_by_reviews;

----------------------------------------------------------------------------

--  3. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ ‚úÖ   


-- –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:

-- positive_reviews ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.

-- negative_reviews ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.

-- positive_share ‚Äî –¥–æ–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.

-- negative_share ‚Äî –¥–æ–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.

-- pos_neg_ratio ‚Äî —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.


WITH base_reviews AS (
    SELECT
        r.review_id,
        r.product_id,
        r.rating::numeric AS rating,
        r.review_date::date AS review_date,
        DATE_TRUNC('month', r.review_date::date)::date AS month
    FROM reviews r
),
product_stats AS (
    SELECT
        p.product_id,
        p.product_name,
        p.category AS category_name,
        COUNT(br.review_id) AS reviews_count,
        AVG(br.rating) AS avg_rating,
        SUM(CASE WHEN br.rating >= 4 THEN 1 ELSE 0 END) AS positive_reviews,
        SUM(CASE WHEN br.rating <= 3 THEN 1 ELSE 0 END) AS negative_reviews,
        ROUND(SUM(CASE WHEN br.rating >= 4 THEN 1 ELSE 0 END)::numeric/NULLIF(COUNT(br.review_id),0), 2) AS positive_share,
        ROUND(SUM(CASE WHEN br.rating <= 3 THEN 1 ELSE 0 END)::numeric/NULLIF(COUNT(br.review_id),0), 2) AS negative_share,
        CASE WHEN SUM(CASE WHEN br.rating <= 3 THEN 1 ELSE 0 END) = 0 THEN NULL ELSE ROUND(SUM(CASE WHEN br.rating >= 4 THEN 1 ELSE 0 END)::numeric / SUM(CASE WHEN br.rating <= 3 THEN 1 ELSE 0 END), 2)
        END AS pos_neg_ratio
    FROM products p
    LEFT JOIN base_reviews br ON p.product_id = br.product_id
    GROUP BY p.product_id, p.product_name, p.category
),
global_stats AS (
    SELECT
        AVG(rating) AS global_avg_rating,
        1623 AS m  -- –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    FROM base_reviews
),
weighted_ratings AS (
    SELECT
        ps.*,
        ROUND(((ps.reviews_count::float / (ps.reviews_count + gs.m)) * ps.avg_rating::numeric + (gs.m::float / (ps.reviews_count + gs.m)) * gs.global_avg_rating::numeric)::numeric, 2) AS weighted_rating
    FROM product_stats ps
    CROSS JOIN global_stats gs
),
monthly_reviews AS (
    SELECT
        br.month,
        br.product_id,
        COUNT(br.review_id) AS monthly_reviews_count,
        ROUND(AVG(br.rating), 2) AS monthly_avg_rating
    FROM base_reviews br
    GROUP BY br.month, br.product_id
),
monthly_with_window AS (
    SELECT
        mr.*,
        SUM(mr.monthly_reviews_count) OVER (PARTITION BY mr.product_id ORDER BY mr.month) AS cumulative_reviews,
        mr.monthly_avg_rating - LAG(mr.monthly_avg_rating) OVER (PARTITION BY mr.product_id ORDER BY mr.month) AS delta_avg_rating,
        RANK() OVER (PARTITION BY mr.month ORDER BY mr.monthly_reviews_count DESC) AS product_rank_by_reviews
    FROM monthly_reviews mr
)
SELECT
    wr.product_id,
    wr.product_name,
    wr.category_name,
    wr.reviews_count,
    ROUND(wr.avg_rating,2) AS avg_rating,
    wr.weighted_rating,
    wr.positive_reviews,
    wr.negative_reviews,
    wr.positive_share,
    wr.negative_share,
    wr.pos_neg_ratio,
    mw.month,
    mw.monthly_reviews_count,
    mw.monthly_avg_rating,
    mw.cumulative_reviews,
    mw.delta_avg_rating,
    mw.product_rank_by_reviews
FROM weighted_ratings wr
LEFT JOIN monthly_with_window mw ON wr.product_id = mw.product_id
ORDER BY mw.month DESC NULLS LAST, mw.product_rank_by_reviews;



-------------------------------------------------------------------------------------------------------------



